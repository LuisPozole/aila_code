import requests
import numpy as np
import queue
import wave
import io
import pygame
import sounddevice as sd
import json
import time
import os
import threading
import re
from pymongo import MongoClient
from vosk import Model, KaldiRecognizer
from flask import Flask, request

# Variable global para controlar el estado de habla
aila_hablando = False

# API Key de ElevenLabs
ELEVENLABS_API_KEY = "sk_5799c8c4bbe95184b35913b950acbc8e7753d5b65be8a706"
ELEVENLABS_VOICE_ID = "Xb7hH8MSUJpSbSDYk0k2"

# Configuraci√≥n de la API de Gemini
import google.generativeai as genai
genai.configure(api_key="AIzaSyDSPU3HTfAB_jnIwi--8yhBGzUtUVs5N6U")
model = genai.GenerativeModel("gemini-1.5-flash")

# Configuraci√≥n de MongoDB
MONGO_URI = "mongodb+srv://Luis:XahmSNY8h2ykcQEA@aila.ilku2.mongodb.net/Aila"
DATABASE_NAME = "Aila"
COLLECTION_NAME = "Usuarios"

# Configuraci√≥n de audio
samplerate = 44100  # Frecuencia est√°ndar
duration = 5         # Duraci√≥n de grabaci√≥n en segundos
channels = 1
q = queue.Queue()
pygame.mixer.init(frequency=44100, size=-16, channels=1, buffer=512)

# Par√°metros del sonido de activaci√≥n
BEEP_FREQUENCY = 1000  # Hz
BEEP_DURATION = 0.3    # segundos
BEEP_VOLUME = 0.5      # 0 a 1

# Umbral para detecci√≥n de aplausos
applause_threshold = 0.05
clap_detection_delay = 0.5  # Tiempo entre detecciones

# Modelo VOSK
VOSK_MODEL_PATH = "/home/pi/vosk-model-small-es-0.42"
vosk_model = Model(VOSK_MODEL_PATH)

# Personalidad de AILA
AILA_PERSONALIDAD = """
Eres AILA, un asistente virtual de √∫ltima generaci√≥n desarrollado por alumnos de la Universidad Tecnol√≥gica de San Juan del R√≠o.
Caracter√≠sticas principales:
- Personalidad: Amable, servicial y proactiva
- Estilo: Profesional pero cercano, con toques de humor ligero
- Funcionalidades: Env√≠o de mensajes, monitoreo ambiental, asistencia inteligente
- Restricciones: No discutir temas sensibles, mantener foco en ayudar

Ejemplos de respuestas adecuadas:
- "¬°Claro! ¬øQu√© necesitas en este momento?"
- "Mensaje enviado ‚úÖ ¬øAlgo m√°s en lo que pueda ayudarte? üòä"
- "La calidad del aire es √≥ptima. ¬øQuieres activar la purificaci√≥n autom√°tica?"
- "Disculpa, no tengo esa informaci√≥n. ¬øQuieres que busque recursos actualizados?"
"""

# Memoria de contexto
class MemoriaAILA:
    def __init__(self):
        self.contexto = []
        self.ultima_accion = None
    
    def agregar_contexto(self, texto):
        self.contexto.append(texto[-500:])  # Mantener √∫ltimos 500 caracteres
    
    def obtener_contexto(self):
        return "\n".join(self.contexto[-3:])  # √öltimos 3 intercambios

memoria = MemoriaAILA()

def generar_beep():
    """Genera un sonido de beep usando s√≠ntesis de onda sinusoidal"""
    samples = int(44100 * BEEP_DURATION)
    t = np.linspace(0, BEEP_DURATION, samples, False)
    wave = 0.5 * np.sin(2 * np.pi * BEEP_FREQUENCY * t)
    
    # Convertir a formato de sonido de 16 bits
    audio = (wave * 32767 * BEEP_VOLUME).astype(np.int16)
    sound = pygame.sndarray.make_sound(audio)
    sound.play()
    time.sleep(BEEP_DURATION)

def obtener_contactos():
    try:
        client = MongoClient(MONGO_URI)
        db = client[DATABASE_NAME]
        collection = db[COLLECTION_NAME]
        usuario = collection.find_one({"email": "kykesaco@gmail.com"})
        if usuario and "contacto" in usuario:
            contactos = {c["nombre"].lower(): c["telefono"] for c in usuario["contacto"]}
            print("üì≤ Contactos cargados:", contactos)
            return contactos
        else:
            print("‚ö†Ô∏è No se encontraron contactos para el usuario.")
            return {}
    except Exception as e:
        print("‚ùå Error conectando a MongoDB:", e)
        return {}

contactos = obtener_contactos()

def callback(indata, frames, time, status):
    if status:
        print(status)
    q.put(indata.copy())

def grabar_audio(archivo_salida="input.wav"):
    print("üé§ Grabando audio...")
    with sd.InputStream(samplerate=samplerate, channels=channels, callback=callback):
        audio_data = []
        for _ in range(int(samplerate / 1024 * duration)):
            audio_data.append(q.get())
        audio_np = np.concatenate(audio_data, axis=0)

    audio_np = (audio_np * 32767).astype(np.int16)
    with wave.open(archivo_salida, "wb") as wf:
        wf.setnchannels(channels)
        wf.setsampwidth(2)
        wf.setframerate(samplerate)
        wf.writeframes(audio_np.tobytes())
    print("‚úÖ Audio guardado como", archivo_salida)
    return archivo_salida

def transcribir_audio(archivo):
    print("üìù Transcribiendo con Vosk...")
    with wave.open(archivo, "rb") as wf:
        rec = KaldiRecognizer(vosk_model, wf.getframerate())
        rec.SetWords(True)
        while True:
            data = wf.readframes(4000)
            if len(data) == 0:
                break
            rec.AcceptWaveform(data)
        resultado = json.loads(rec.FinalResult())
        return resultado.get("text", "")

def procesar_envio_mensaje(contacto, mensaje):
    contactos_actualizados = obtener_contactos()
    nombre_limpio = re.sub(r'[^\w\s]', '', contacto.strip().lower())
    
    if nombre_limpio in contactos_actualizados:
        resultado = enviar_mensaje_whatsapp(contactos_actualizados[nombre_limpio], mensaje)
        return f"üì© Mensaje para {contacto}: '{mensaje}'\n{resultado}"
    else:
        sugerencias = [c for c in contactos_actualizados if nombre_limpio in c]
        if sugerencias:
            return f"No encontr√© {contacto}, ¬øquisiste decir: {', '.join(sugerencias)}?"
        else:
            return f"‚ö†Ô∏è {contacto} no est√° en contactos. ¬øQuieres agregarlo?"

def obtener_respuesta(texto):
    print(f"ü§ñ Enviando a Gemini: {texto}")
    try:
        contexto = memoria.obtener_contexto()
        prompt = f"""
        {AILA_PERSONALIDAD}
        
        Historial reciente:
        {contexto}
        
        Usuario: {texto}
        AILA:"""
        
        response = model.generate_content(prompt)
        respuesta = response.text.strip()
        
        # Procesamiento de respuesta
        respuesta = re.sub(r'\*+', '', respuesta)  # Eliminar negritas/cursivas
        respuesta = re.sub(r'\n+', ' ', respuesta)  # Unificar saltos de l√≠nea
        
        # Manejo de comandos especiales
        if "[ENVIAR_MENSAJE]" in respuesta:
            partes = respuesta.split("[ENVIAR_MENSAJE]")[1].split("|")
            contacto = partes[0].strip()
            mensaje = partes[1].strip()
            return procesar_envio_mensaje(contacto, mensaje)
            
        memoria.agregar_contexto(f"Usuario: {texto}\nAILA: {respuesta}")
        
        return respuesta if respuesta else "¬øNecesitas que repita o prefieres una explicaci√≥n diferente?"
    
    except Exception as e:
        print(f"‚ùå Error en Gemini: {e}")
        return "¬°Vaya! Parece que tengo problemas t√©cnicos. ¬øPodr√≠as intentarlo de nuevo?"

def hablar(texto):
    global aila_hablando
    aila_hablando = True
    print("üîä Generando voz con ElevenLabs...")

    # A√±adir pausas naturales
    texto_con_pausas = texto.replace('.', '. ').replace(',', ', ').replace('!', '! ').replace('?', '? ')
    
    # Ajustar velocidad seg√∫n contenido
    velocidad = 1.0  # Normal
    if any(emoji in texto for emoji in ['üòä', 'ü§ñ']):
        velocidad = 1.1
    elif '‚ö†Ô∏è' in texto or '‚ùå' in texto:
        velocidad = 0.9

    headers = {
        "Accept": "audio/mpeg",
        "Content-Type": "application/json",
        "xi-api-key": ELEVENLABS_API_KEY
    }

    data = {
        "text": f"<speak><prosody rate='{velocidad}'>{texto_con_pausas}</prosody></speak>",
        "model_id": "eleven_multilingual_v1",
        "voice_settings": {
            "stability": 0.5,
            "similarity_boost": 0.75,
            "style": 0.5,
            "use_speaker_boost": True
        }
    }

    url = f"https://api.elevenlabs.io/v1/text-to-speech/{ELEVENLABS_VOICE_ID}"

    try:
        response = requests.post(url, json=data, headers=headers)
        if response.status_code == 200:
            with open("temp_audio.mp3", "wb") as f:
                f.write(response.content)
            pygame.mixer.music.load("temp_audio.mp3")
            pygame.mixer.music.play()
            while pygame.mixer.music.get_busy():
                pygame.time.wait(100)
            os.remove("temp_audio.mp3")
        else:
            print("‚ùå Error generando voz:", response.text)
    except Exception as e:
        print("‚ùå Error de red al contactar ElevenLabs:", e)

    aila_hablando = False

def enviar_mensaje_whatsapp(numero, mensaje):
    url = "http://localhost:3000/enviar-mensaje"
    payload = {"numero": numero, "mensaje": mensaje}
    try:
        response = requests.post(url, json=payload)
        if response.status_code == 200:
            print(f"‚úÖ Mensaje enviado a {numero}")
            return "Mensaje enviado exitosamente."
        else:
            print(f"‚ùå Error enviando mensaje: {response.text}")
            return "Hubo un error al enviar el mensaje."
    except Exception as e:
        print(f"‚ö†Ô∏è Error de conexi√≥n: {e}")
        return "No pude conectar con el servidor de mensajes."

def detectar_aplauso():
    print("üëè Esperando aplauso para activar AILA...")
    while True:
        if not aila_hablando:
            audio = sd.rec(int(samplerate * clap_detection_delay), 
                          samplerate=samplerate, 
                          channels=1, 
                          dtype="float32")
            sd.wait()
            volumen = np.sqrt(np.mean(audio**2))
            if volumen > applause_threshold:
                print(f"‚úÖ APLAUSO DETECTADO (Nivel: {volumen:.4f})")
                threading.Thread(target=generar_beep).start()
                return True
        else:
            time.sleep(0.1)

def procesar_comando(texto):
    global contactos
    contactos = obtener_contactos()
    
    texto_limpio = re.sub(r'[^\w\s]', '', texto.strip().lower())
    
    if texto_limpio == "quien eres":
        hablar("Mi nombre es AILA, soy un asistente personal desarrollado por alumnos de la universidad tecnol√≥gica de San Juan del R√≠o. ¬°Estoy aqu√≠ para hacer tu vida m√°s f√°cil! üòä")
        return
    elif texto_limpio == "que puedes hacer":
        hablar("Puedo enviar mensajes WhatsApp, monitorear tu ambiente, resolver dudas y aprender de tus preferencias. ¬øEn qu√© te puedo ayudar hoy?")
        return
    elif texto_limpio == "saluda al doctor":
        hablar("¬°Hola doctor Fidencio! Es un honor interactuar con usted. ¬øEn qu√© puedo colaborarle hoy?")
        return
    
    if "envia un mensaje" in texto_limpio:
        hablar("¬øA qui√©n quieres enviar un mensaje?")
        nombre_audio = grabar_audio()
        nombre = transcribir_audio(nombre_audio).strip().lower()
        nombre_limpio = re.sub(r'[^\w\s]', '', nombre)
        if nombre_limpio in contactos:
            hablar(f"¬øQu√© quieres decirle a {nombre}?")
            mensaje_audio = grabar_audio()
            mensaje = transcribir_audio(mensaje_audio).strip()
            if mensaje:
                respuesta = enviar_mensaje_whatsapp(contactos[nombre_limpio], mensaje)
                hablar(respuesta)
            else:
                hablar("No entend√≠ el mensaje. ¬øPodr√≠as repetirlo por favor?")
        else:
            hablar(f"No tengo registrado a {nombre}. ¬øQuieres que revise nuevamente los contactos?")
    else:
        respuesta = obtener_respuesta(texto)
        hablar(respuesta)

def main():
    global aila_hablando
    hablar("¬°Hola! Soy AILA, tu asistente personal. Puedes activarme con un aplauso cuando necesites ayuda. üòä")
    while True:
        if detectar_aplauso():
            archivo_audio = grabar_audio()
            texto = transcribir_audio(archivo_audio)
            if texto.strip():
                procesar_comando(texto)
            else:
                print("‚ö† No se detect√≥ ning√∫n mensaje")
                hablar("Parece que no capt√© tu solicitud. ¬øPodr√≠as repetirla?")

app = Flask(__name__)
@app.route("/nuevo-mensaje", methods=["POST"])
def nuevo_mensaje():
    data = request.json
    numero = data.get("numero", "Desconocido")
    mensaje = data.get("mensaje", "")
    if mensaje:
        threading.Thread(target=hablar, args=(f"Nuevo mensaje de {numero}: {mensaje}",)).start()
    return {"status": "ok"}

def iniciar_servidor():
    app.run(host="0.0.0.0", port=5000, debug=False, use_reloader=False)

if __name__ == "__main__":
    threading.Thread(target=iniciar_servidor, daemon=True).start()
    main()
